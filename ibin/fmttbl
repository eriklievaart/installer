#!/bin/python3

import re
import sys


# data structure for storing a hashdoc table
class Table:
	def __init__(self):
		self.rows = [];
		self.lengths = [];

	def addRow(self, cells):
		self.rows.append(cells);
		for i in range(0, len(cells)):
			if i == len(self.lengths):
				self.lengths.append(cells[i].length());
			elif cells[i].length() > self.lengths[i]:
				self.lengths[i] = cells[i].length();

	def dump(self):
		for row in self.rows:
			line = '';
			i = 0;
			if row[0].tag == 'th':
				line += '`';
				while i < len(row) and row[i].tag == 'th':
					line += ' ' + row[i].body.ljust(self.lengths[i]) + ' `'
					i += 1;
			if i < len(row):
				line += '|';
				while i < len(row):
					line += ' ' + row[i].body.ljust(self.lengths[i]) + ' |'
					i += 1;
			print(line);


# datastructure for storing a cell in a hashdoc table
class Cell:
	def __init__(self, body, tag):
		self.tag = tag
		self.body = body.rstrip();
		if(self.body.startswith(' ')):
			self.body = self.body[1:];

	def length(self):
		return len(self.body);


# format a table and print it
def print_formatted_table(lines):
	if len(lines) == 0:
		return;

	if len(lines) == 1:
		sys.stdout.write(lines[0]);
		return;

	table = Table();
	for line in lines:
		cells = [];
		th = re.split('[`]', line.strip());
		for i in range(1, len(th)-1):
			cells.append(Cell(th[i], 'th'));

		tds = re.sub('/^.*`/', '', line.strip())
		td = re.split('[|]', tds.strip());
		for i in range(1, len(td)-1):
			cells.append(Cell(td[i], 'td'));

		table.addRow(cells);

	table.dump();


chunk = [];
for line in sys.stdin:
	trimmed = line.strip();
	if(re.search('^[`|].*[`|]', trimmed)):
		chunk.append(line);
	else:
		print_formatted_table(chunk);
		chunk = [];
		print(line, end='');

print_formatted_table(chunk);

