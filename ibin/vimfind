#!/bin/dash

die(){
	echo "$@" >&2
	exit 5
}

open_found() {
	count=$(cat $found | wc -l)
	cat $found

	if [ $count -gt 0 -a $count -le 5 ]; then
		exec vim $(cat $found)
	else
		echo "$count matches"
	fi
}

cheat() {
	cd ~/Development/git/cheat/files
	exec vim $(find . -type f -name "*$1*")
}

dependencies() {
	project="$1"
	dir=~/Development/git/$project
	if [ -d $file ]; then
		cd $dir
		exec vim main/config/dependencies.txt
	else
		echo "no project named '$project' exists"
	fi
}

vimhelp() {
	exec vim "+help $1 | only"
}

vimgrep() {
	find -type f | sed '/\/\.git\//d' | grep "$1" > $found
	open_found
}

vimproject() {
	[ $# -eq 0 ] && die "expecting 2 arguments: [project] [file]"

	if [ "$1" = '.' -o $# -eq 1 ]; then
		[ "$1" = '.' ] && shift
		echo "$PWD" | grep -q '/git/' || die "not in a project '$PWD'"
		project=$(echo "$PWD" | sed -r 's:.*/git/([^/]++)/.*:\1:')
		path=$(echo "$PWD" | sed "s:.*/git/$project/::")
	else
		project=$1
		path='.'
		shift
	fi

	dir=~/Development/git/"$project"
	[ -d "$dir" ] || die "invalid project '$project'"
	cd "$dir"

	[ -f $found ] && rm $found
	for expr in $@
	do
		find "$path" -type f | grep -v '/[.]git/' | grep "$expr" >> $found
	done
	open_found
}

vimwhich() {
	file=$(which "$1")
	if [ -f "$file" ]; then
		exec vim "$file"
	else
		echo "cannot find '$1'"
	fi
}

flag="$1"
found=/tmp/vim/found.txt
shift
case $flag in
	-c) cheat        "$@" ;;
	-d) dependencies "$@" ;;
	-g) vimgrep      "$@" ;;
	-h) vimhelp      "$@" ;;
	-p) vimproject   "$@" ;;
	-w) vimwhich     "$@" ;;
esac



