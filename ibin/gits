#!/usr/bin/dash
# script to run git commands on multiple git repos simultaneously
set -e

YELLOW='\033[1;33m'
RED='\033[1;31m'
PLAIN='\033[0m'

LAST=~/.cache/gits-last-repo


list() {
	while read file; do
		if [ -f "$file" ]; then
			echo "$file"
		else
			find "$file" -type f;
		fi
		echo "$data"
	done
}

if [ "$1" = "acp" ]; then
	message=$(echo "$@" | sed 's/^-c *//')
	if [ -z "$message" ]; then
		echo "$RED    git commit message required! $PLAIN"
		exit 500
	fi
fi

if [ "$(echo "$1" | cut -c 1)" = "@" ]; then
	project=$(echo "$1" | sed 's/@//')
	if [ "$1" = "@" ]; then
		project="$(cat $LAST)"
	fi

	repo=~/Development/git/$project
	config=$repo/.git/config
	echo "repo: $repo"
	shift

	if [ ! -d $repo ]; then
		echo "$RED repo $project does not exist $PLAIN"
		exit 404
	fi

	url="$(sed -n '/^\s*url\s*=/p' "$config")"
	if ! echo "$url" | grep -q @; then
		if [ "$url" = "" ]; then
			echo "$RED repo $project does not have a remote configured $PLAIN"
		else
			echo "$RED repo $project does not have a user configured $PLAIN"
			vi "$config"
		fi
	fi

	cd $repo
	echo $project > $LAST

	if [ "$1" = "config" ]; then
		exec vim .git/config
	fi

	if [ "$1" = "acp" ]; then
		git add --all
		if [ -z "$2" ]; then
			git commit
		else
			git commit -m "$2"
		fi
		git pull --rebase
		git push
		exit 0
	fi

	if [ "$1" = "untracked" ]; then
		exec vim $(git status | sed '0,/Untracked.*/d;/\t/!d' | list)
	fi

	if [ "$1" = "" ]; then
		git status -s
		if [ "$(git status -s)" = "" ]; then
			echo " up to date"
			exit 0
		fi
		echo
		echo "show diff? (y)"
		read answer
		if [ "$answer" = "y" -o "$answer" = "" ]; then
			git diff -w
		fi
	else
		git "$@"
	fi
	exit 0
fi


for dir in $(ls ~/Development/git)
do
	[ -d ~/Development/git/"$dir" ] || continue
	cd ~/Development/git/$dir
	[ -d ".git" ] || continue

	color=""
	branch=$(git status | sed '/^On branch.*/!d; s/^On branch //')
	untracked=$(git status | sed '/^Untracked.*/!d; s/ntracked.*//')
	changes=$(git status | sed '/^Changes.*/!d; s/hanges.*//')
	
	if [ ! -z "$untracked$changes" ]; then
		color=$YELLOW
	fi
	
	echo "$color[$branch] $dir $untracked$changes$PLAIN"

	
	if [ "$1" = "acp" ]; then
		if [  ! -z "$untracked$changes" ]; then
			git add --all
			git commit -m "$message"
			git pull --rebase
			git push
			echo ''
		fi

	elif [ "$#" -gt 0 ]; then
		git "$@"
		echo
	fi
done

