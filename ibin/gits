#!/bin/dash
# script to run git commands on multiple git repos simultaneously

# usage:
#     gits → show listing of all repo's and their commit status
#     gits + [command] → ALL repos: run git command
#     gits + acp [message] → ALL repos: execute add --all; commit -m "$message"; push
#
#     gits [project] → repo show full status and optional diff
#     gits [project] [command] → repo execute regular git command
#     gits [project] acp → repo execute add --all; commit; push
#     gits [project] acp [message] → repo execute add --all; commit -m "$message"; push
#     gits [project] untracked → repo view new files not shown in git diff
#     gits [project] config → edit git config for repo

all_projects() {
	if [ "$1" = "acp" ]; then
		message=$(echo "$@" | sed 's/^-c *//')
		if [ -z "$message" ]; then
			echo "$RED    git commit message required! $PLAIN"
			exit 5
		fi
	fi

	for dir in $(ls ~/Development/git)
	do
		[ -d ~/Development/git/"$dir" ] || continue
		cd ~/Development/git/$dir
		[ -d ".git" ] || continue

		color=""
		branch=$(git status | sed '/^On branch.*/!d; s/^On branch //')
		untracked=$(git status | sed '/^Untracked.*/!d; s/ntracked.*//')
		changes=$(git status | sed '/^Changes.*/!d; s/hanges.*//')

		if [ ! -z "$untracked$changes" ]; then
			color=$YELLOW
		fi

		echo "$color[$branch] $dir $untracked$changes$PLAIN"


		if [ "$1" = "acp" ]; then
			if [  ! -z "$untracked$changes" ]; then
				git add --all
				git commit -m "$message"
				git pull
				git push
				echo ''
			fi

		elif [ "$#" -gt 0 ]; then
			git "$@"
			echo
		fi
	done
}


list_files() {
	while read file; do
		if [ -f "$file" ]; then
			echo "$file"
		else
			find "$file" -type f;
		fi
		echo "$data"
	done
}


view_untracked() {
	exec vim $(echo "$untracked" | list_files)
}

project() {
	project="$1"
	if [ "$1" = "@" ]; then
		project="$(cat $LAST)"
	fi

	repo=~/Development/git/$project
	config=$repo/.git/config
	echo "repo: $repo"
	shift

	if [ ! -d "$repo" ]; then
		echo "$RED repo $project does not exist $PLAIN"
		exit 404
	fi

	url="$(sed -n '/^\s*url\s*=/p' "$config")"
	if ! echo "$url" | grep -q @; then
		if [ "$url" = "" ]; then
			echo "$RED repo $project does not have a remote configured $PLAIN"
		else
			echo "$RED repo $project does not have a user configured $PLAIN"
			vim "$config"
		fi
	fi

	cd $repo
	echo $project > $LAST

	if [ "$1" = "config" ]; then
		exec vim .git/config
	fi

	if [ "$1" = "acp" ]; then
		git add --all
		if [ -z "$2" ]; then
			git commit
		else
			git commit -m "$2"
		fi
		git pull
		git push
		exit 0
	fi

	untracked=$(git status | sed '0,/Untracked.*/d;/\t/!d')
	if [ "$1" = "untracked" ]; then
		view_untracked
	fi

	if [ "$1" = "" ]; then
		git status -s
		if [ "$(git status -s)" = "" ]; then
			echo " up to date"
			exit 0
		fi
		echo
		echo "show diff? (y)"
		read answer
		if [ "$answer" = "y" -o "$answer" = "" ]; then
			clear
			git diff -w

			if [ -z "$untracked" ]; then
				exit 0
			fi
			echo "untracked:\n$untracked\n"
			echo "show untracked? (y)"
			read answer
			if [ "$answer" = "y" -o "$answer" = "" ]; then
				view_untracked
			fi
		fi
	else
		git "$@"
	fi
	exit 0
}


set -e

YELLOW='\033[1;33m'
RED='\033[1;31m'
PLAIN='\033[0m'

LAST=~/.cache/gits-last-repo

if [ $# -eq 0 ]; then
	all_projects
	exit 0
elif [ "$1" = '+' ]; then
	shift
	all_projects "$@"
else
	project "$@"
fi











